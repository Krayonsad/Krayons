Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----          28-07-2025    07:23                assets
d----          08-08-2025    00:20                components
d----          28-07-2025    07:23                hooks
d----          28-07-2025    07:23                lib
d----          28-07-2025    07:23                pages
-a---          28-07-2025    07:23            648 App.css
-a---          28-07-2025    08:26           1224 App.tsx
-a---          28-07-2025    07:23           9324 index.css
-a---          28-07-2025    07:23            163 main.tsx
-a---          28-07-2025    07:23             39 vite-env.d.ts

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\assets

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          28-07-2025    07:23          45500 brand-logos-collection.png
-a---          28-07-2025    07:23          69324 data-solutions.jpg
-a---          28-07-2025    07:23          80853 experiential-marketing.jpg
-a---          28-07-2025    07:23         191916 hero-background.jpg
-a---          28-07-2025    07:23          84015 strategic-events.jpg

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\components

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d----          08-08-2025    00:20                3d
d----          28-07-2025    07:23                ui
-a---          08-08-2025    00:20           8859 About.tsx
-a---          29-07-2025    11:32           3855 Footer.tsx
-a---          08-08-2025    00:21           4788 Hero.tsx
-a---          29-07-2025    16:25           9963 Navigation.tsx
-a---          08-08-2025    00:21          11607 Services.tsx
-a---          29-07-2025    14:11          12449 Testimonials.tsx
-a---          29-07-2025    12:51          10002 WhyChooseUs.tsx

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\components\3d

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          08-08-2025    00:20           8076 ThreeDBackground.tsx

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\components\ui

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          28-07-2025    07:23           2033 accordion.tsx
-a---          28-07-2025    07:23           4559 alert-dialog.tsx
-a---          28-07-2025    07:23           1643 alert.tsx
-a---          28-07-2025    07:23            145 aspect-ratio.tsx
-a---          28-07-2025    07:23           1453 avatar.tsx
-a---          28-07-2025    07:23           1164 badge.tsx
-a---          28-07-2025    07:23           2816 breadcrumb.tsx
-a---          28-07-2025    07:23           1957 button.tsx
-a---          28-07-2025    07:23           2684 calendar.tsx
-a---          28-07-2025    07:23           1956 card.tsx
-a---          28-07-2025    07:23           6470 carousel.tsx
-a---          28-07-2025    07:23          10829 chart.tsx
-a---          28-07-2025    07:23           1084 checkbox.tsx
-a---          28-07-2025    07:23            324 collapsible.tsx
-a---          28-07-2025    07:23           5032 command.tsx
-a---          28-07-2025    07:23           7444 context-menu.tsx
-a---          28-07-2025    07:23           3955 dialog.tsx
-a---          28-07-2025    07:23           3123 drawer.tsx
-a---          28-07-2025    07:23           7493 dropdown-menu.tsx
-a---          28-07-2025    07:23           4261 form.tsx
-a---          28-07-2025    07:23           1211 hover-card.tsx
-a---          28-07-2025    07:23           2223 input-otp.tsx
-a---          28-07-2025    07:23            813 input.tsx
-a---          28-07-2025    07:23            734 label.tsx
-a---          28-07-2025    07:23           8208 menubar.tsx
-a---          28-07-2025    07:23           5174 navigation-menu.tsx
-a---          28-07-2025    07:23           2868 pagination.tsx
-a---          28-07-2025    07:23           1259 popover.tsx
-a---          28-07-2025    07:23            803 progress.tsx
-a---          28-07-2025    07:23           1509 radio-group.tsx
-a---          28-07-2025    07:23           1752 resizable.tsx
-a---          28-07-2025    07:23           1688 scroll-area.tsx
-a---          28-07-2025    07:23           5773 select.tsx
-a---          28-07-2025    07:23            785 separator.tsx
-a---          28-07-2025    07:23           4381 sheet.tsx
-a---          28-07-2025    07:23          24128 sidebar.tsx
-a---          28-07-2025    07:23            276 skeleton.tsx
-a---          28-07-2025    07:23           1103 slider.tsx
-a---          28-07-2025    07:23            923 sonner.tsx
-a---          28-07-2025    07:23           1166 switch.tsx
-a---          28-07-2025    07:23           2882 table.tsx
-a---          28-07-2025    07:23           1936 tabs.tsx
-a---          28-07-2025    07:23            796 textarea.tsx
-a---          28-07-2025    07:23           4972 toast.tsx
-a---          28-07-2025    07:23            805 toaster.tsx
-a---          28-07-2025    07:23           1798 toggle-group.tsx
-a---          28-07-2025    07:23           1478 toggle.tsx
-a---          28-07-2025    07:23           1173 tooltip.tsx
-a---          28-07-2025    07:23             85 use-toast.ts

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\hooks

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          28-07-2025    07:23            584 use-mobile.tsx
-a---          28-07-2025    07:23           4086 use-toast.ts

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\lib

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          28-07-2025    07:23            172 utils.ts

    Directory: C:\Users\Lovish\Lovish\Coding\WebDev\Projects\Krayons\src\pages

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---          08-08-2025    00:07            624 Index.tsx
-a---          28-07-2025    07:23            766 NotFound.tsx
-a---          28-07-2025    07:23           9493 Privacy.tsx
-a---          28-07-2025    07:23           8152 Terms.tsx

This is the directory Structure.

Current problem: Every component has different 3D effects, I want all of them have to have consistent same 3d effects. 
Solution I was implementing: I have created a component called ThreeDBackground. I have modified About.tsx, Services.tsx, and Hero.tsx to use this component. For example, I have modified About.tsx like this:

import React, { useState, useEffect, useRef } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import { Award, Users, Globe, TrendingUp } from "lucide-react";
import ThreeDBackground from "@/components/3d/ThreeDBackground";

const About = () => {
  const [isVisible, setIsVisible] = useState(false);
  const sectionRef = useRef<HTMLElement>(null);

  const achievements = [
    {
      icon: <Award className="w-8 h-8" />,
      number: "10+",
      label: "Years of Excellence",
      description: "Leading digital marketing solutions since 2014"
    },
    {
      icon: <Users className="w-8 h-8" />,
      number: "1000+",
      label: "Strategic Partnerships",
      description: "Successfully connecting advertisers and publishers"
    },
    {
      icon: <Globe className="w-8 h-8" />,
      number: "50+",
      label: "Markets Reached",
      description: "Global digital marketing presence"
    },
    {
      icon: <TrendingUp className="w-8 h-8" />,
      number: "95%",
      label: "Project Success Rate",
      description: "Consistently exceeding digital marketing objectives"
    }
  ];

  useEffect(() => {
    // Intersection Observer for visibility
    const observer = new IntersectionObserver(
      ([entry]) => {
        setIsVisible(entry.isIntersecting);
      },
      { threshold: 0.1 }
    );

    if (sectionRef.current) {
      observer.observe(sectionRef.current);
    }

    return () => {
      if (observer && sectionRef.current) {
        observer.unobserve(sectionRef.current);
      }
    };
  }, []);

  return (
    <section ref={sectionRef} className="py-20 bg-background relative overflow-hidden">
      {/* 3D Background */}
      <ThreeDBackground 
        opacity={0.3}
        particleCount={100}
        shapeCount={12}
        colorScheme="blue"
        animationSpeed={1}
        className={`opacity-30 ${isVisible ? 'blur-0' : 'blur-sm'} transition-all duration-1000`}
      />
      
      <div className="max-w-7xl mx-auto px-6 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
          {/* Content with Animation */}
          <div className={`transition-all duration-1000 transform ${isVisible ? 'translate-x-0 opacity-100' : '-translate-x-10 opacity-0'}`}>
            <h2 className="text-4xl md:text-5xl font-bold text-foreground mb-6">
              About <span className="bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-500 bg-clip-text text-transparent animate-pulse">KRAYONS GROUP</span>
            </h2>
            
            <div className="space-y-6 text-lg text-muted-foreground">
              <p className={`transition-all duration-1000 delay-200 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-5 opacity-0'}`}>
                <strong className="text-foreground">Krayons Group</strong> is your premier partner for 
                <strong className="text-foreground"> digital marketing, integrated communication, and project-based solutions</strong>. 
                We excel at forging strategic partnerships that effectively connect clients, facilitate seamless 
                communication, and deliver exceptional project outcomes.
              </p>
              
              <p className={`transition-all duration-1000 delay-300 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-5 opacity-0'}`}>
                Our expertise spans <strong className="text-foreground">cutting-edge digital strategies</strong>, comprehensive 
                communication across all channels, and tailored project management that consistently surpasses expectations. 
                We don't just meet industry standards – <strong className="text-foreground">we set them</strong>.
              </p>
              
              <p className={`transition-all duration-1000 delay-400 transform ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-5 opacity-0'}`}>
                Krayons is more than an affiliate marketing platform; we are <strong className="text-foreground">architects 
                of successful communication strategies</strong> and project-based collaborations. Our team comprises seasoned 
                professionals who understand the intricacies of the digital landscape.
              </p>
            </div>

            {/* Mission Statement with 3D hover effect */}
            <div className={`mt-8 p-6 bg-gradient-to-r from-blue-50/50 to-purple-50/50 rounded-lg border-l-4 border-blue-500 transition-all duration-1000 delay-500 transform hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/20 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
              <h3 className="font-semibold text-foreground mb-2">Our Mission</h3>
              <p className="text-muted-foreground">
                To facilitate the connection between advertisers and publishers, enabling them to attain their 
                digital marketing objectives through our dynamic platform that broadens reach and monetizes online assets.
              </p>
            </div>
          </div>

          {/* Achievements Grid with 3D effects */}
          <div className={`grid grid-cols-2 gap-6 transition-all duration-1000 transform ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-10 opacity-0'}`}>
            {achievements.map((achievement, index) => (
              <div 
                key={index} 
                className={`transition-all duration-700 transform ${isVisible ? 'scale-100 opacity-100' : 'scale-95 opacity-0'}`}
                style={{
                  transitionDelay: `${index * 200 + 300}ms`,
                }}
              >
                <Card className="group relative overflow-hidden border-0 bg-gradient-to-br from-white/80 to-blue-50/50 backdrop-blur-sm hover:from-blue-50/80 hover:to-purple-50/50 transition-all duration-500 hover:scale-105 hover:rotate-1 hover:shadow-2xl hover:shadow-blue-500/20 transform-gpu">
                  <div className="absolute inset-0 bg-gradient-to-r from-blue-400/0 via-purple-400/0 to-cyan-400/0 group-hover:from-blue-400/10 group-hover:via-purple-400/10 group-hover:to-cyan-400/10 transition-all duration-500"></div>
                  <CardContent className="p-6 text-center relative z-10">
                    <div className="flex justify-center mb-4">
                      <div className="bg-gradient-to-r from-blue-500/10 to-purple-500/10 p-3 rounded-full text-blue-600 group-hover:from-blue-500/20 group-hover:to-purple-500/20 group-hover:scale-110 group-hover:rotate-12 transition-all duration-500 transform-gpu">
                        <div className="group-hover:animate-bounce">
                          {achievement.icon}
                        </div>
                      </div>
                    </div>
                    <div className="text-3xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-cyan-600 bg-clip-text text-transparent mb-2 group-hover:scale-110 transition-transform duration-300 cursor-default">
                      {achievement.number}
                    </div>
                    <div className="font-semibold text-foreground mb-2 group-hover:text-blue-600 transition-colors duration-300">
                      {achievement.label}
                    </div>
                    <div className="text-sm text-muted-foreground group-hover:text-foreground transition-colors duration-300">
                      {achievement.description}
                    </div>
                  </CardContent>
                  
                  {/* Animated border */}
                  <div className="absolute inset-0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-500">
                    <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-blue-500 via-purple-500 to-cyan-500 p-[1px]">
                      <div className="w-full h-full rounded-lg bg-white/90"></div>
                    </div>
                  </div>
                </Card>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* Additional floating elements */}
      <div className="absolute top-20 left-10 w-2 h-2 bg-blue-500 rounded-full animate-ping opacity-50"></div>
      <div className="absolute top-40 right-20 w-3 h-3 bg-purple-500 rounded-full animate-pulse opacity-40"></div>
      <div className="absolute bottom-20 left-20 w-1 h-1 bg-cyan-500 rounded-full animate-bounce opacity-60"></div>
      <div className="absolute bottom-40 right-10 w-2 h-2 bg-green-500 rounded-full animate-ping opacity-30" style={{animationDelay: '1s'}}></div>
    </section>
  );
};

export default About;

Now I want other components to use this component as well.


Do it for me for Services.tsx. Fill in the empty spaces with 3d shapes. 

This is ThreeDBackground.tsx:
import React, { useRef, useEffect } from 'react';
import * as THREE from 'three';

interface ThreeDBackgroundProps {
  opacity?: number;
  particleCount?: number;
  shapeCount?: number;
  colorScheme?: 'blue' | 'purple' | 'cyan' | 'mixed';
  animationSpeed?: number;
  className?: string;
}

const ThreeDBackground: React.FC<ThreeDBackgroundProps> = ({
  opacity = 0.3,
  particleCount = 80,
  shapeCount = 12,
  colorScheme = 'mixed',
  animationSpeed = 1,
  className = ''
}) => {
  const mountRef = useRef<HTMLDivElement>(null);
  const sceneRef = useRef<THREE.Scene>();
  const rendererRef = useRef<THREE.WebGLRenderer>();
  const cameraRef = useRef<THREE.PerspectiveCamera>();
  const animationRef = useRef<number>();
  const meshesRef = useRef<THREE.Mesh[]>([]);

  useEffect(() => {
    if (!mountRef.current) return;

    // Scene setup
    const scene = new THREE.Scene();
    sceneRef.current = scene;

    // Camera setup
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 0, 10);
    cameraRef.current = camera;

    // Renderer setup
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    rendererRef.current = renderer;
    mountRef.current.appendChild(renderer.domElement);

    // Consistent geometries
    const geometries = [
      new THREE.IcosahedronGeometry(0.7, 0),
      new THREE.OctahedronGeometry(0.6, 0),
      new THREE.TetrahedronGeometry(0.8, 0),
      new THREE.BoxGeometry(0.8, 0.8, 0.8),
      new THREE.SphereGeometry(0.6, 16, 16),
      new THREE.ConeGeometry(0.5, 1, 8)
    ];

    // Color schemes
    const colorSchemes = {
      blue: [0x3b82f6, 0x1e40af, 0x60a5fa, 0x93c5fd],
      purple: [0x8b5cf6, 0x7c3aed, 0xa78bfa, 0xc4b5fd],
      cyan: [0x06b6d4, 0x0891b2, 0x22d3ee, 0x67e8f9],
      mixed: [0x3b82f6, 0x8b5cf6, 0x06b6d4, 0x10b981, 0xf59e0b, 0xef4444]
    };

    const colors = colorSchemes[colorScheme];

    // Consistent materials
    const materials = colors.map(color => 
      new THREE.MeshPhongMaterial({ 
        color,
        shininess: 30, 
        transparent: true, 
        opacity: opacity * 0.6,
        wireframe: true
      })
    );

    const meshes: THREE.Mesh[] = [];

    // Create floating objects with consistent positioning
    for (let i = 0; i < shapeCount; i++) {
      const geometry = geometries[i % geometries.length];
      const material = materials[i % materials.length];
      const mesh = new THREE.Mesh(geometry, material);
      
      // Consistent positioning pattern
      const angle = (i / shapeCount) * Math.PI * 2;
      const radius = 6 + Math.random() * 4;
      const layer = Math.floor(i / 4); // 4 objects per layer
      
      mesh.position.x = Math.cos(angle) * radius;
      mesh.position.y = Math.sin(angle) * radius * 0.6 + (layer - 1) * 2;
      mesh.position.z = -2 - Math.random() * 3;
      
      // Random rotation
      mesh.rotation.x = Math.random() * Math.PI;
      mesh.rotation.y = Math.random() * Math.PI;
      mesh.rotation.z = Math.random() * Math.PI;
      
      // Store animation data
      mesh.userData = {
        initialX: mesh.position.x,
        initialY: mesh.position.y,
        initialZ: mesh.position.z,
        floatSpeed: (0.3 + Math.random() * 0.3) * animationSpeed,
        rotationSpeed: (0.005 + Math.random() * 0.01) * animationSpeed,
        offsetPhase: Math.random() * Math.PI * 2
      };
      
      meshes.push(mesh);
      scene.add(mesh);
    }

    meshesRef.current = meshes;

    // Consistent lighting setup
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.4);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    const pointLight = new THREE.PointLight(colors[0], 0.3, 15);
    pointLight.position.set(-5, 3, 5);
    scene.add(pointLight);

    // Consistent particle system
    const particlesGeometry = new THREE.BufferGeometry();
    const posArray = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount * 3; i++) {
      posArray[i] = (Math.random() - 0.5) * 30;
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
    const particlesMaterial = new THREE.PointsMaterial({
      size: 0.02,
      color: colors[0],
      transparent: true,
      opacity: opacity * 0.8
    });

    const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particlesMesh);

    // Consistent animation loop
    const animate = () => {
      animationRef.current = requestAnimationFrame(animate);

      const time = Date.now() * 0.001;

      // Animate floating objects with consistent pattern
      meshes.forEach((mesh, index) => {
        const userData = mesh.userData;
        
        // Consistent floating motion
        mesh.position.y = userData.initialY + Math.sin(time * userData.floatSpeed + userData.offsetPhase) * 0.4;
        mesh.position.x = userData.initialX + Math.cos(time * userData.floatSpeed * 0.8 + userData.offsetPhase) * 0.3;
        mesh.position.z = userData.initialZ + Math.sin(time * userData.floatSpeed * 0.6 + userData.offsetPhase) * 0.2;
        
        // Consistent rotation
        mesh.rotation.x += userData.rotationSpeed;
        mesh.rotation.y += userData.rotationSpeed * 0.8;
        mesh.rotation.z += userData.rotationSpeed * 0.6;
      });

      // Animate particles consistently
      particlesMesh.rotation.y += 0.001 * animationSpeed;
      particlesMesh.rotation.x += 0.0005 * animationSpeed;

      // Subtle camera movement
      if (cameraRef.current) {
        cameraRef.current.position.x = Math.sin(time * 0.04) * 0.05;
        cameraRef.current.position.y = Math.cos(time * 0.05) * 0.03;
        cameraRef.current.lookAt(0, 0, 0);
      }

      renderer.render(scene, camera);
    };

    animate();

    // Consistent mouse interaction
    const handleMouseMove = (event: MouseEvent) => {
      const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;

      meshes.forEach((mesh, index) => {
        const factor = (index % 3 + 1) * 0.05;
        mesh.rotation.x += mouseY * factor * 0.005;
        mesh.rotation.y += mouseX * factor * 0.005;
      });
    };

    // Resize handler
    const handleResize = () => {
      if (!cameraRef.current || !rendererRef.current) return;
      
      cameraRef.current.aspect = window.innerWidth / window.innerHeight;
      cameraRef.current.updateProjectionMatrix();
      rendererRef.current.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('resize', handleResize);
      
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      
      if (mountRef.current && rendererRef.current) {
        mountRef.current.removeChild(rendererRef.current.domElement);
      }
      
      // Dispose of Three.js objects
      geometries.forEach(geo => geo.dispose());
      materials.forEach(mat => mat.dispose());
      particlesGeometry.dispose();
      particlesMaterial.dispose();
      rendererRef.current?.dispose();
    };
  }, [opacity, particleCount, shapeCount, colorScheme, animationSpeed]);

  return (
    <div 
      ref={mountRef} 
      className={`absolute inset-0 ${className}`}
      style={{ pointerEvents: 'none' }}
    />
  );
};

export default ThreeDBackground;

This is my Services.tsx:
import React, { useEffect, useRef, useState } from 'react';

const Services = () => {
  const sectionRef = useRef<HTMLDivElement>(null);
  const [activeStep, setActiveStep] = useState(0);
  const [isInView, setIsInView] = useState(false);

  const services = [
    {
      id: 'strategy',
      title: 'Strategic Planning',
      description: 'We develop comprehensive strategies that align with your business objectives, market dynamics, and competitive landscape to ensure sustainable growth.',
      icon: '🎯',
      gradient: 'from-slate-600 via-slate-700 to-slate-800',
      accentColor: 'from-blue-600 to-indigo-600',
      bgColor: 'bg-slate-50',
      stats: '95% Success Rate'
    },
    {
      id: 'creative',
      title: 'Creative Excellence',
      description: 'Our award-winning creative team delivers innovative solutions that captivate audiences and drive meaningful engagement across all touchpoints.',
      icon: '🎨',
      gradient: 'from-purple-600 via-purple-700 to-indigo-800',
      accentColor: 'from-purple-600 to-pink-600',
      bgColor: 'bg-purple-50',
      stats: '65+ Awards'
    },
    {
      id: 'digital',
      title: 'Digital Innovation',
      description: 'Leveraging cutting-edge technology and data-driven insights to create digital experiences that transform how customers interact with your brand.',
      icon: '💻',
      gradient: 'from-emerald-600 via-teal-700 to-cyan-800',
      accentColor: 'from-emerald-600 to-teal-600',
      bgColor: 'bg-emerald-50',
      stats: '300% ROI Average'
    },
    {
      id: 'media',
      title: 'Media Strategy',
      description: 'Strategic media placement and optimization across traditional and digital channels to maximize reach, engagement, and conversion rates.',
      icon: '📺',
      gradient: 'from-orange-600 via-red-600 to-pink-700',
      accentColor: 'from-orange-600 to-red-600',
      bgColor: 'bg-orange-50',
      stats: '2B+ Impressions'
    },
    {
      id: 'events',
      title: 'Experience Design',
      description: 'Creating immersive brand experiences and memorable events that forge lasting connections between your brand and your audience.',
      icon: '🎪',
      gradient: 'from-violet-600 via-purple-700 to-fuchsia-800',
      accentColor: 'from-violet-600 to-purple-600',
      bgColor: 'bg-violet-50',
      stats: '500K+ Attendees'
    },
    {
      id: 'transformation',
      title: 'Brand Transformation',
      description: 'Complete brand evolution that positions your company for future success while honoring your core values and heritage.',
      icon: '✨',
      gradient: 'from-amber-600 via-orange-600 to-red-700',
      accentColor: 'from-amber-600 to-orange-600',
      bgColor: 'bg-amber-50',
      stats: '100% Satisfaction'
    }
  ];

  useEffect(() => {
    const handleScroll = () => {
      if (!sectionRef.current) return;

      const section = sectionRef.current;
      const rect = section.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      
      // Check if section is in view
      const inView = rect.top < windowHeight && rect.bottom > 0;
      setIsInView(inView);

      if (!inView) return;

      // Calculate scroll progress through the section
      const sectionTop = section.offsetTop;
      const sectionHeight = section.offsetHeight;
      const scrollY = window.scrollY;
      
      const relativeScroll = scrollY - sectionTop + windowHeight * 0.5;
      const progress = Math.max(0, Math.min(1, relativeScroll / (sectionHeight * 0.8)));
      
      // Calculate active step with smooth transitions
      const stepProgress = progress * (services.length - 1);
      const newActiveStep = Math.floor(stepProgress);
      
      setActiveStep(Math.max(0, Math.min(services.length - 1, newActiveStep)));
    };

    const throttledScroll = () => {
      requestAnimationFrame(handleScroll);
    };

    window.addEventListener('scroll', throttledScroll, { passive: true });
    handleScroll();

    return () => window.removeEventListener('scroll', throttledScroll);
  }, [services.length]);

  return (
    <section 
      ref={sectionRef}
      className="relative py-24 bg-gradient-to-br from-gray-50 via-white to-gray-100 overflow-hidden"
      style={{ minHeight: '300vh' }}
    >
      {/* Sophisticated Background */}
      <div className="absolute inset-0 opacity-40">
        <div 
          className="absolute inset-0 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50"
          style={{
            backgroundImage: `
              radial-gradient(circle at 25% 25%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 75% 75%, rgba(168, 85, 247, 0.1) 0%, transparent 50%),
              radial-gradient(circle at 50% 50%, rgba(236, 72, 153, 0.05) 0%, transparent 50%)
            `
          }}
        />
      </div>

      {/* Floating Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(8)].map((_, i) => (
          <div
            key={i}
            className={`absolute w-2 h-2 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full opacity-20 animate-pulse`}
            style={{
              left: `${20 + i * 12}%`,
              top: `${30 + (i % 3) * 20}%`,
              animationDelay: `${i * 0.5}s`,
              animationDuration: `${3 + i * 0.5}s`
            }}
          />
        ))}
      </div>

      <div className="container mx-auto px-6 relative z-10 max-w-7xl">
        {/* Enhanced Header */}
        <div className={`text-center mb-24 transform transition-all duration-1000 ${
          isInView ? 'translate-y-0 opacity-100' : 'translate-y-12 opacity-0'
        }`}>
          <div className="inline-flex items-center bg-white/80 backdrop-blur-sm px-6 py-2 rounded-full border border-gray-200/50 shadow-sm mb-6">
            <span className="w-2 h-2 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-pulse mr-3"></span>
            <span className="text-sm font-medium text-gray-600 tracking-wide uppercase">Professional Services</span>
          </div>
          
          <h2 className="text-6xl font-bold mb-6 leading-tight">
            <span className="bg-gradient-to-r from-gray-900 via-gray-700 to-gray-900 bg-clip-text text-transparent">
              Your Success
            </span>
            <br />
            <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
              Journey
            </span>
          </h2>
          
          <p className="text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed font-light">
            A comprehensive approach to transforming your vision into measurable results through strategic excellence and innovative execution.
          </p>
        </div>

        {/* Professional Timeline */}
        <div className="max-w-6xl mx-auto">
          <div className="relative">
            {/* Enhanced Timeline Spine */}
            <div className="absolute left-1/2 transform -translate-x-1/2 w-px h-full bg-gradient-to-b from-transparent via-gray-300 to-transparent" />
            
            {/* Animated Progress Line */}
            <div 
              className="absolute left-1/2 transform -translate-x-1/2 w-px bg-gradient-to-b from-blue-600 via-purple-600 to-pink-600 transition-all duration-1000 ease-out"
              style={{
                height: `${Math.min(100, (activeStep + 1) * (100 / services.length))}%`,
                opacity: isInView ? 1 : 0
              }}
            >
              {/* Glowing tip */}
              <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-3 h-3 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full shadow-lg animate-pulse" />
            </div>

            {/* Service Nodes */}
            {services.map((service, index) => (
              <div
                key={service.id}
                className={`relative flex items-center mb-40 transition-all duration-1200 ease-out ${
                  index % 2 === 0 ? 'justify-start' : 'justify-end'
                }`}
                style={{ 
                  transitionDelay: `${index * 100}ms`
                }}
              >
                {/* Enhanced Timeline Node */}
                <div className="absolute left-1/2 transform -translate-x-1/2 z-20">
                  <div className={`relative w-20 h-20 rounded-full border-4 border-white shadow-xl flex items-center justify-center text-2xl transition-all duration-700 ${
                    index <= activeStep 
                      ? `bg-gradient-to-br ${service.gradient} scale-110 shadow-2xl` 
                      : 'bg-white scale-100 shadow-md'
                  }`}>
                    {/* Node glow effect */}
                    {index <= activeStep && (
                      <div className={`absolute inset-0 bg-gradient-to-br ${service.accentColor} rounded-full opacity-30 animate-ping`} />
                    )}
                    
                    <span className={`relative z-10 ${index <= activeStep ? 'filter drop-shadow-sm' : 'grayscale opacity-60'}`}>
                      {service.icon}
                    </span>
                  </div>
                  
                  {/* Enhanced Step Indicator */}
                  <div className={`absolute -bottom-10 left-1/2 transform -translate-x-1/2 transition-all duration-500 ${
                    index <= activeStep ? 'opacity-100 translate-y-0' : 'opacity-60 translate-y-2'
                  }`}>
                    <div className={`px-3 py-1 rounded-full text-xs font-bold transition-all duration-500 ${
                      index <= activeStep 
                        ? `bg-gradient-to-r ${service.accentColor} text-white shadow-md` 
                        : 'bg-gray-200 text-gray-500'
                    }`}>
                      STEP {index + 1}
                    </div>
                  </div>
                </div>

                {/* Enhanced Service Card */}
                <div className={`w-5/12 ${index % 2 === 0 ? 'mr-auto pr-20' : 'ml-auto pl-20'}`}>
                  <div className={`relative group transition-all duration-1000 transform ${
                    index <= activeStep 
                      ? 'translate-y-0 opacity-100 scale-100' 
                      : index === activeStep + 1 
                        ? 'translate-y-4 opacity-70 scale-98'
                        : 'translate-y-8 opacity-40 scale-95'
                  }`}>
                    {/* Premium Card Glow */}
                    {index === activeStep && (
                      <>
                        <div className={`absolute -inset-4 bg-gradient-to-br ${service.accentColor} opacity-20 blur-2xl rounded-3xl animate-pulse`} />
                        <div className={`absolute -inset-2 bg-gradient-to-br ${service.accentColor} opacity-10 blur-xl rounded-2xl`} />
                      </>
                    )}
                    
                    {/* Main Professional Card */}
                    <div className={`relative bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-lg hover:shadow-2xl transition-all duration-700 border border-gray-200/50 group-hover:border-gray-300/50 ${
                      index === activeStep ? 'ring-1 ring-gray-200/50 shadow-xl' : ''
                    }`}>
                      {/* Card Header */}
                      <div className="flex items-start justify-between mb-6">
                        <div className="flex items-center">
                          <div className={`w-14 h-14 rounded-xl ${service.bgColor} flex items-center justify-center text-2xl mr-5 transition-all duration-500 ${
                            index <= activeStep ? 'animate-bounce' : ''
                          } shadow-sm border border-gray-100`}>
                            {service.icon}
                          </div>
                          <div>
                            <h3 className={`text-2xl font-bold bg-gradient-to-r ${service.gradient} bg-clip-text text-transparent mb-1`}>
                              {service.title}
                            </h3>
                            <div className={`inline-flex items-center text-xs font-semibold px-3 py-1 rounded-full transition-all duration-500 ${
                              index <= activeStep 
                                ? `bg-gradient-to-r ${service.accentColor} text-white` 
                                : 'bg-gray-100 text-gray-500'
                            }`}>
                              {service.stats}
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      {/* Enhanced Description */}
                      <p className="text-gray-600 leading-relaxed text-base font-light mb-6">
                        {service.description}
                      </p>
                      
                      {/* Professional Progress Bar */}
                      <div className="relative">
                        <div className="h-1 bg-gray-100 rounded-full overflow-hidden">
                          <div className={`h-full bg-gradient-to-r ${service.accentColor} rounded-full transition-all duration-1000 ease-out ${
                            index <= activeStep ? 'w-full' : 'w-0'
                          }`}>
                            <div className="h-full w-full bg-white/30 animate-pulse" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

      </div>
    </section>
  );
};

export default Services;